---
import type { SiteConfig } from '../config/site.config';

interface Props {
  title: string;
  description: string;
  image?: string;
  siteConfig: SiteConfig;
  // Article-specific props
  type?: 'website' | 'article';
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  tags?: string[];
  // Additional SEO props
  keywords?: string[];
  noindex?: boolean;
  nofollow?: boolean;
}

const { 
  title, 
  description, 
  image, 
  siteConfig,
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  tags = [],
  keywords = [],
  noindex = false,
  nofollow = false
} = Astro.props;

const fullTitle = title === siteConfig.siteName ? title : `${title} | ${siteConfig.siteName}`;
const baseUrl = siteConfig.domain.startsWith('http') ? siteConfig.domain : `https://${siteConfig.domain}`;
const ogImage = image || `${baseUrl}/og-image.jpg`;
const url = `${baseUrl}${Astro.url.pathname}`;
const siteUrl = baseUrl;

// Generate structured data
const organizationSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": siteConfig.siteName,
  "url": siteUrl,
  "logo": `${siteUrl}${siteConfig.logo}`,
  "sameAs": siteConfig.social ? Object.values(siteConfig.social).filter(Boolean) : [],
  "contactPoint": {
    "@type": "ContactPoint",
    "email": siteConfig.contactEmail,
    "contactType": "Customer Service"
  }
};

const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": siteConfig.siteName,
  "url": siteUrl,
  "description": siteConfig.tagline || description,
  "potentialAction": {
    "@type": "SearchAction",
    "target": {
      "@type": "EntryPoint",
      "urlTemplate": `${siteUrl}/search?q={search_term_string}`
    },
    "query-input": "required name=search_term_string"
  }
};

let articleSchema = null;
if (type === 'article' && publishedTime) {
  articleSchema = {
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": title,
    "description": description,
    "image": ogImage,
    "datePublished": publishedTime,
    "dateModified": modifiedTime || publishedTime,
    "author": {
      "@type": "Person",
      "name": author || siteConfig.siteName,
      "url": siteConfig.social?.linkedin || siteUrl
    },
    "publisher": {
      "@type": "Organization",
      "name": siteConfig.siteName,
      "logo": {
        "@type": "ImageObject",
        "url": `${siteUrl}${siteConfig.logo}`
      }
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": url
    },
    ...(tags.length > 0 && { "keywords": tags.join(", ") })
  };
}
---

<!-- Primary Meta Tags -->
<title>{fullTitle}</title>
<meta name="title" content={fullTitle} />
<meta name="description" content={description} />
{keywords.length > 0 && <meta name="keywords" content={keywords.join(", ")} />}
<meta name="author" content={author || siteConfig.siteName} />
<meta name="robots" content={`${noindex ? 'noindex' : 'index'}, ${nofollow ? 'nofollow' : 'follow'}`} />
<meta name="theme-color" content={siteConfig.primaryColor} />
<link rel="canonical" href={url} />

<!-- Language -->
<meta http-equiv="content-language" content="en" />
<link rel="alternate" hreflang="en" href={url} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={url} />
<meta property="og:title" content={fullTitle} />
<meta property="og:description" content={description} />
<meta property="og:image" content={ogImage} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content={title} />
<meta property="og:site_name" content={siteConfig.siteName} />
<meta property="og:locale" content="en_US" />
{type === 'article' && publishedTime && (
  <>
    <meta property="article:published_time" content={publishedTime} />
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    {author && <meta property="article:author" content={author} />}
    {tags.map((tag) => (
      <meta key={tag} property="article:tag" content={tag} />
    ))}
  </>
)}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={url} />
<meta name="twitter:title" content={fullTitle} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={ogImage} />
<meta name="twitter:image:alt" content={title} />
{siteConfig.social?.twitter && (
  <meta name="twitter:site" content={siteConfig.social.twitter} />
  <meta name="twitter:creator" content={siteConfig.social.twitter} />
)}

<!-- Structured Data (JSON-LD) -->
<script type="application/ld+json" set:html={JSON.stringify(organizationSchema)} />
<script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />
{articleSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(articleSchema)} />
)}

